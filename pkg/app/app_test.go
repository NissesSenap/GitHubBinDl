package app

import (
	"context"
	"io/ioutil"
	"os"
	"path/filepath"
	"testing"

	"github.com/go-logr/logr"
	logrTesting "github.com/go-logr/logr/testing"
	"github.com/stretchr/testify/assert"
)

// getEnv is a helper function that get key environment variable if exist otherwise return defalutValue
func getEnv(key, defaultValue string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return defaultValue
}

// if cat is used as the cli and a file is specified i test to see that the output matches the text from the original file
func TestSaveCompletion(t *testing.T) {

	const catLocation = "/bin/"
	const catName = "cat"
	//const completionLocation = "/tmp/testData.go"
	var commandArgs = []string{"app_test.go"}
	ctx := logr.NewContext(context.Background(), logrTesting.NullLogger{})

	workspace := getEnv("TEMP_DIR", "/tmp")
	t.Logf("This is the workspace: %v", workspace)
	folderCompletionLocation, err := ioutil.TempDir(workspace, "testFolder")

	if err != nil {
		t.Errorf("Unable to create a tmp dir %v", err)
	}

	completionLocation := filepath.Join(folderCompletionLocation, "app_test.go")

	err = saveCompletion(ctx, catLocation, catName, completionLocation, commandArgs)
	if err != nil {
		t.Errorf("Unable to get any output from saveCompletion %v", err)
	}

	output, err := ioutil.ReadFile(completionLocation)
	if err != nil {
		t.Errorf("Unable to open file: %v generated by saveCompletion, with error: %v", completionLocation, err)
	}

	expectedOutput, err := ioutil.ReadFile(commandArgs[0])
	if err != nil {
		t.Errorf("Unable to open test file: %v with err %v", commandArgs[0], err)
	}

	assert.ElementsMatch(t, output, expectedOutput)
}
